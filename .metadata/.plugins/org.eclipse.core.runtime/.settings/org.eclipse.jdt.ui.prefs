content_assist_disabled_computers=org.eclipse.jdt.ui.textProposalCategory\u0000org.eclipse.recommenders.calls.rcp.proposalCategory.templates\u0000org.eclipse.mylyn.java.ui.javaAllProposalCategory\u0000org.eclipse.jdt.ui.javaAllProposalCategory\u0000org.eclipse.jdt.ui.javaTypeProposalCategory\u0000org.eclipse.jdt.ui.javaNoTypeProposalCategory\u0000org.eclipse.recommenders.chain.rcp.proposalCategory.chain\u0000
content_assist_lru_history=<?xml version\="1.0" encoding\="UTF-8" standalone\="no"?><history maxLHS\="100" maxRHS\="10"><lhs name\="java.lang.Cloneable"><rhs name\="java.util.Stack"/></lhs><lhs name\="java.util.AbstractList"><rhs name\="java.util.Stack"/></lhs><lhs name\="java.util.AbstractCollection"><rhs name\="java.util.Stack"/><rhs name\="java.util.PriorityQueue"/></lhs><lhs name\="java.util.Stack"><rhs name\="java.util.Stack"/></lhs><lhs name\="java.util.Queue"><rhs name\="java.util.LinkedList"/><rhs name\="java.util.PriorityQueue"/></lhs><lhs name\="CircularQueue"><rhs name\="CircularQueue"/></lhs><lhs name\="doublyLinkedList.DoublyLinkedList"><rhs name\="doublyLinkedList.DoublyLinkedList"/></lhs><lhs name\="com.akash.maharana.linkedList.IntersectionPointOfTwoLinkedList$SinglyLinkedList"><rhs name\="com.akash.maharana.linkedList.IntersectionPointOfTwoLinkedList$SinglyLinkedList"/></lhs><lhs name\="com.akash.maharana.linkedList.LinkedList"><rhs name\="com.akash.maharana.linkedList.LinkedList"/></lhs><lhs name\="circularLinkedListDemo.CircularLinkedList"><rhs name\="circularLinkedListDemo.CircularLinkedList"/></lhs><lhs name\="com.akash.maharana.BSTImplementation"><rhs name\="com.akash.maharana.BSTImplementation"/></lhs><lhs name\="bst.BSTImpl"><rhs name\="bst.BSTImpl"/></lhs><lhs name\="avl.AVLTreeImpl"><rhs name\="avl.AVLTreeImpl"/></lhs><lhs name\="avl.AVLImpl"><rhs name\="avl.AVLImpl"/></lhs><lhs name\="java.io.Reader"><rhs name\="java.io.BufferedReader"/><rhs name\="java.io.InputStreamReader"/></lhs><lhs name\="java.lang.Readable"><rhs name\="java.io.BufferedReader"/><rhs name\="java.io.InputStreamReader"/></lhs><lhs name\="java.io.Closeable"><rhs name\="java.io.BufferedReader"/><rhs name\="java.io.InputStreamReader"/></lhs><lhs name\="java.lang.AutoCloseable"><rhs name\="java.io.BufferedReader"/><rhs name\="java.io.InputStreamReader"/></lhs><lhs name\="java.io.BufferedReader"><rhs name\="java.io.BufferedReader"/></lhs><lhs name\="webCrawler.WebCrawler"><rhs name\="webCrawler.WebCrawler"/></lhs><lhs name\="topologicalOrdering.Topologicalordering"><rhs name\="topologicalOrdering.Topologicalordering"/></lhs><lhs name\="cycleDetectionDFS.CycleDetection"><rhs name\="cycleDetectionDFS.CycleDetection"/></lhs><lhs name\="java.util.AbstractQueue"><rhs name\="java.util.PriorityQueue"/></lhs><lhs name\="java.util.PriorityQueue"><rhs name\="java.util.PriorityQueue"/></lhs><lhs name\="dijkstraShortestPath.Vertex"><rhs name\="dijkstraShortestPath.Vertex"/></lhs><lhs name\="dijkstraShortestPath.DijkstraShortestPath"><rhs name\="dijkstraShortestPath.DijkstraShortestPath"/></lhs><lhs name\="bellManFordShortestPath.Vertex"><rhs name\="bellManFordShortestPath.Vertex"/></lhs><lhs name\="bellManFordShortestPath.BellManFord"><rhs name\="bellManFordShortestPath.BellManFord"/></lhs><lhs name\="directedAcyclicGraphShortestpath.TopologicalSort"><rhs name\="directedAcyclicGraphShortestpath.TopologicalSort"/></lhs><lhs name\="spanningTreeKruskal.DisjointSet"><rhs name\="spanningTreeKruskal.DisjointSet"/></lhs><lhs name\="spanningTreePrimsLazy.Edge"><rhs name\="spanningTreePrimsLazy.Edge"/></lhs><lhs name\="stronglyConnectedComponentsKosaraju.DepthFirstSearch"><rhs name\="stronglyConnectedComponentsKosaraju.DepthFirstSearch"/></lhs><lhs name\="travellingSalesMan.TravelingSalesmanHeldKarp"><rhs name\="travellingSalesMan.TravelingSalesmanHeldKarp"/></lhs><lhs name\="trieAutoComplete.TrieAutoComplete"><rhs name\="trieAutoComplete.TrieAutoComplete"/></lhs><lhs name\="tst.TernarySearchTree"><rhs name\="tst.TernarySearchTree"/></lhs><lhs name\="trieWithMap.TrieNode"><rhs name\="trieWithMap.TrieNode"/></lhs><lhs name\="trieWithMap.TrieWithMap"><rhs name\="trieWithMap.TrieWithMap"/></lhs><lhs name\="graphDFS.DFSImpl"><rhs name\="graphDFS.DFSImpl"/></lhs><lhs name\="graphDFSRecursive.DFSImpl"><rhs name\="graphDFSRecursive.DFSImpl"/></lhs><lhs name\="topologicalOrdering.TopologicalSort"><rhs name\="topologicalOrdering.TopologicalSort"/></lhs><lhs name\="cycleDetectionInGraph.CycleDetection"><rhs name\="cycleDetectionInGraph.CycleDetection"/></lhs><lhs name\="bellManFord.Vertex"><rhs name\="bellManFord.Vertex"/></lhs><lhs name\="bellManFord.BellManFord"><rhs name\="bellManFord.BellManFord"/></lhs><lhs name\="directedAcylicGraphShortestPath.TopologicalOrdering"><rhs name\="directedAcylicGraphShortestPath.TopologicalOrdering"/></lhs><lhs name\="directedAcylicGraphShortestPath.DAGShortestPath"><rhs name\="directedAcylicGraphShortestPath.DAGShortestPath"/></lhs><lhs name\="kruskalMST.DisjointSet"><rhs name\="kruskalMST.DisjointSet"/></lhs><lhs name\="kruskalMST.Vertex"><rhs name\="kruskalMST.Vertex"/></lhs><lhs name\="kruskalMST.KruskalAlgorithm"><rhs name\="kruskalMST.KruskalAlgorithm"/></lhs><lhs name\="kosaRaju.DepthFirstSearch"><rhs name\="kosaRaju.DepthFirstSearch"/></lhs><lhs name\="representationOfGraph.AdjacenyListGraph"><rhs name\="representationOfGraph.AdjacenyListGraph"/></lhs><lhs name\="detectCycleInAUndirectedGraphDisjointSet.DisjointSet"><rhs name\="detectCycleInAUndirectedGraphDisjointSet.DisjointSet"/></lhs><lhs name\="detectCycleInAUndirectedGraphDisjointSet.DetectCycle"><rhs name\="detectCycleInAUndirectedGraphDisjointSet.DetectCycle"/></lhs><lhs name\="snakeAndLadderProblem.SnakeAndLadder"><rhs name\="snakeAndLadderProblem.SnakeAndLadder"/></lhs><lhs name\="checkBipartiteOrNot.Bipartite"><rhs name\="checkBipartiteOrNot.Bipartite"/></lhs><lhs name\="biConnectedComponentOfAGraph.Vertex"><rhs name\="biConnectedComponentOfAGraph.Vertex"/></lhs><lhs name\="taylorSeries.TaylorSeries"><rhs name\="taylorSeries.TaylorSeries"/></lhs><lhs name\="combination.Combination"><rhs name\="combination.Combination"/></lhs><lhs name\="towerOfHanoi.TowerOfHanoi"><rhs name\="towerOfHanoi.TowerOfHanoi"/></lhs><lhs name\="knapsack.Knapsack"><rhs name\="knapsack.Knapsack"/></lhs><lhs name\="minimumNoOfWaysToMakeADenomination.MinimumNumberOfWaysToMakeADenomination"><rhs name\="minimumNoOfWaysToMakeADenomination.MinimumNumberOfWaysToMakeADenomination"/></lhs><lhs name\="coinChanging.MinimumNumberOfCoinsToMakeASum"><rhs name\="coinChanging.MinimumNumberOfCoinsToMakeASum"/></lhs><lhs name\="cuttingRod.CuttingRod"><rhs name\="cuttingRod.CuttingRod"/></lhs><lhs name\="longestCommonSubstring.LongestCommonSubstring"><rhs name\="longestCommonSubstring.LongestCommonSubstring"/></lhs><lhs name\="longestCommonSubsequence.LongestCommonSubsequence"><rhs name\="longestCommonSubsequence.LongestCommonSubsequence"/></lhs><lhs name\="longestIncreasingSubsequence.LongestIncreasingSubsequence"><rhs name\="longestIncreasingSubsequence.LongestIncreasingSubsequence"/></lhs><lhs name\="longestBitonicSubsequence.LongestBitonicSubsequence"><rhs name\="longestBitonicSubsequence.LongestBitonicSubsequence"/></lhs><lhs name\="longestPallindromicSubsequence.LongestPallindromicSubsequence"><rhs name\="longestPallindromicSubsequence.LongestPallindromicSubsequence"/></lhs><lhs name\="java.lang.CharSequence"><rhs name\="java.lang.String"/><rhs name\="java.lang.StringBuffer"/></lhs><lhs name\="java.lang.AbstractStringBuilder"><rhs name\="java.lang.StringBuffer"/></lhs><lhs name\="java.lang.Appendable"><rhs name\="java.lang.StringBuffer"/></lhs><lhs name\="minimumJumpsRequiredToReachEndOfAnArray.MinimumJumpsRequired"><rhs name\="minimumJumpsRequiredToReachEndOfAnArray.MinimumJumpsRequired"/></lhs><lhs name\="subsetSumProblem.SubsetSumProblem"><rhs name\="subsetSumProblem.SubsetSumProblem"/></lhs><lhs name\="maximumSumIncreasingSubsequence.MaximumSumIncreasingSubsequence"><rhs name\="maximumSumIncreasingSubsequence.MaximumSumIncreasingSubsequence"/></lhs><lhs name\="maximumSumNonAdjacentElement.MaximumSumNonAdjacentElements"><rhs name\="maximumSumNonAdjacentElement.MaximumSumNonAdjacentElements"/></lhs><lhs name\="wordBreakProblem.WordBreakingProblem"><rhs name\="wordBreakProblem.WordBreakingProblem"/></lhs><lhs name\="pallindrome.Pallindrome"><rhs name\="pallindrome.Pallindrome"/></lhs><lhs name\="printAllCombinationDemo.PrintAllCombinationsOfGivenLength"><rhs name\="printAllCombinationDemo.PrintAllCombinationsOfGivenLength"/></lhs><lhs name\="findAllEvenLengthBinarySequence.FindAllEvenLengthBinarySequenceWithSameSumOfFirstAndSecondHalf"><rhs name\="findAllEvenLengthBinarySequence.FindAllEvenLengthBinarySequenceWithSameSumOfFirstAndSecondHalf"/></lhs><lhs name\="printAllPossibleCombinationsThatEvaluatesToAtarget.PrintAllPossibleCombinationsThatEvaluatesToATarget"><rhs name\="printAllPossibleCombinationsThatEvaluatesToAtarget.PrintAllPossibleCombinationsThatEvaluatesToATarget"/></lhs><lhs name\="substringWithSameFirstAndLastCharacter.SubstringWithSameFirstAndLastCharacter"><rhs name\="substringWithSameFirstAndLastCharacter.SubstringWithSameFirstAndLastCharacter"/></lhs><lhs name\="allPossibleBinaryNumbersWithEqualSumInBothHalves.AllPossibleBinaryNumbersWithEqualSumInBothHalves"><rhs name\="allPossibleBinaryNumbersWithEqualSumInBothHalves.AllPossibleBinaryNumbersWithEqualSumInBothHalves"/></lhs><lhs name\="combinationInAstringOfDigits.CombinationInAstringOfDigits"><rhs name\="combinationInAstringOfDigits.CombinationInAstringOfDigits"/></lhs><lhs name\="lengthOfAStringUsingRecursion.LengthOfAStringUsingRecursion"><rhs name\="lengthOfAStringUsingRecursion.LengthOfAStringUsingRecursion"/></lhs><lhs name\="copyStringUsingRecursion.CopyStringUsingRecursion"><rhs name\="copyStringUsingRecursion.CopyStringUsingRecursion"/></lhs><lhs name\="nQueensProblem.NQueenProblem"><rhs name\="nQueensProblem.NQueenProblem"/></lhs><lhs name\="printAllPermutationOfAString.PrintAllPermutationOfAString"><rhs name\="printAllPermutationOfAString.PrintAllPermutationOfAString"/></lhs><lhs name\="circularLinkedList.CircularLinkedList"><rhs name\="circularLinkedList.CircularLinkedList"/></lhs><lhs name\="byteByByte._13_ImplementKStacksInAnArray"><rhs name\="byteByByte._13_ImplementKStacksInAnArray"/></lhs><lhs name\="byteByByte._21_BinaryTreeToDoublyLinkedList"><rhs name\="byteByByte._21_BinaryTreeToDoublyLinkedList"/></lhs><lhs name\="com.akash.maharana.LinkedListNode"><rhs name\="com.akash.maharana.LinkedListNode"/></lhs><lhs name\="com.akash.maharana.BinaryTreeNode"><rhs name\="com.akash.maharana.BinaryTreeNode"/></lhs><lhs name\="common.SinglyLinkedListNode"><rhs name\="common.SinglyLinkedListNode"/></lhs><lhs name\="common.BinaryTreeNode"><rhs name\="common.BinaryTreeNode"/></lhs><lhs name\="BSTImpl"><rhs name\="BSTImpl"/></lhs><lhs name\="bfs.BreadthFirstSearch"><rhs name\="bfs.BreadthFirstSearch"/></lhs><lhs name\="dfs.DepthFirstSearch"><rhs name\="dfs.DepthFirstSearch"/></lhs><lhs name\="topologicalSort.TopologicalSort"><rhs name\="topologicalSort.TopologicalSort"/></lhs><lhs name\="cycleDetection.CycleDetection"><rhs name\="cycleDetection.CycleDetection"/></lhs><lhs name\="java.util.Collection"><rhs name\="java.util.PriorityQueue"/></lhs><lhs name\="java.lang.Iterable"><rhs name\="java.util.PriorityQueue"/></lhs></history>
content_assist_number_of_computers=24
content_assist_proposals_background=255,255,255
content_assist_proposals_foreground=0,0,0
eclipse.preferences.version=1
fontPropagated=true
org.eclipse.jdt.internal.ui.navigator.layout=2
org.eclipse.jdt.internal.ui.navigator.librariesnode=true
org.eclipse.jdt.ui.editor.tab.width=
org.eclipse.jdt.ui.formatterprofiles.version=13
org.eclipse.jdt.ui.javadoclocations.migrated=true
org.eclipse.jdt.ui.text.code_templates_migrated=true
org.eclipse.jdt.ui.text.custom_code_templates=<?xml version\="1.0" encoding\="UTF-8" standalone\="no"?><templates/>
org.eclipse.jdt.ui.text.custom_templates=<?xml version\="1.0" encoding\="UTF-8" standalone\="no"?><templates/>
org.eclipse.jdt.ui.text.templates_migrated=true
org.eclipse.jface.textfont=1|Consolas|10.0|0|WINDOWS|1|0|0|0|0|0|0|0|0|1|0|0|0|0|Consolas;
proposalOrderMigrated=true
spelling_locale_initialized=true
tabWidthPropagated=true
useAnnotationsPrefPage=true
useQuickDiffPrefPage=true
